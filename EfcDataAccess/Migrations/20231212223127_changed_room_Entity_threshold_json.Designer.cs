// <auto-generated />
using System;
using EfcDataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EfcDataAccess.Migrations
{
    [DbContext(typeof(SmartHomeSystemContext))]
    [Migration("20231212223127_changed_room_Entity_threshold_json")]
    partial class changed_room_Entity_threshold_json
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entities.Home", b =>
                {
                    b.Property<long>("HomeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("HomeId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("CurrentRoomProfileId")
                        .HasColumnType("bigint");

                    b.Property<string>("DeviceEui")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("HomeId");

                    b.HasIndex("CurrentRoomProfileId");

                    b.HasIndex("DeviceEui")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Homes");
                });

            modelBuilder.Entity("Entities.LastMeasurement", b =>
                {
                    b.Property<long>("LastMeasurementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("LastMeasurementId"));

                    b.Property<string>("DeviceEui")
                        .HasColumnType("text");

                    b.Property<int?>("LastDataMeasurementSensorDataId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("LastMeasurementId");

                    b.HasIndex("LastDataMeasurementSensorDataId");

                    b.ToTable("LastMeasurement");
                });

            modelBuilder.Entity("Entities.RoomProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<float>("IdealHumidity")
                        .HasColumnType("real");

                    b.Property<float>("IdealTemperature")
                        .HasColumnType("real");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ThresholdId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ThresholdId");

                    b.HasIndex("UserId");

                    b.ToTable("RoomProfiles");
                });

            modelBuilder.Entity("Entities.SensorData", b =>
                {
                    b.Property<int>("SensorDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SensorDataId"));

                    b.Property<string>("DeviceEui")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("HomeId")
                        .HasColumnType("bigint");

                    b.Property<float>("HumidityData")
                        .HasColumnType("real");

                    b.Property<long?>("RoomProfileId")
                        .HasColumnType("bigint");

                    b.Property<float>("TemperatureData")
                        .HasColumnType("real");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("SensorDataId");

                    b.HasIndex("HomeId");

                    b.HasIndex("RoomProfileId");

                    b.ToTable("DataMeasures");
                });

            modelBuilder.Entity("Entities.ThresholdLimits", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<float>("HumidityMax")
                        .HasColumnType("real");

                    b.Property<float>("HumidityMin")
                        .HasColumnType("real");

                    b.Property<float>("TemperatureMax")
                        .HasColumnType("real");

                    b.Property<float>("TemperatureMin")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("ThresholdsLimits");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Entities.Home", b =>
                {
                    b.HasOne("Entities.RoomProfile", "CurrentRoomProfile")
                        .WithMany()
                        .HasForeignKey("CurrentRoomProfileId");

                    b.HasOne("Entities.User", null)
                        .WithMany("Homes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentRoomProfile");
                });

            modelBuilder.Entity("Entities.LastMeasurement", b =>
                {
                    b.HasOne("Entities.SensorData", "LastDataMeasurement")
                        .WithMany()
                        .HasForeignKey("LastDataMeasurementSensorDataId");

                    b.Navigation("LastDataMeasurement");
                });

            modelBuilder.Entity("Entities.RoomProfile", b =>
                {
                    b.HasOne("Entities.ThresholdLimits", "Threshold")
                        .WithMany()
                        .HasForeignKey("ThresholdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.User", null)
                        .WithMany("RoomProfiles")
                        .HasForeignKey("UserId");

                    b.Navigation("Threshold");
                });

            modelBuilder.Entity("Entities.SensorData", b =>
                {
                    b.HasOne("Entities.Home", null)
                        .WithMany("Measurements")
                        .HasForeignKey("HomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.RoomProfile", null)
                        .WithMany("Measurements")
                        .HasForeignKey("RoomProfileId");
                });

            modelBuilder.Entity("Entities.Home", b =>
                {
                    b.Navigation("Measurements");
                });

            modelBuilder.Entity("Entities.RoomProfile", b =>
                {
                    b.Navigation("Measurements");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Navigation("Homes");

                    b.Navigation("RoomProfiles");
                });
#pragma warning restore 612, 618
        }
    }
}
